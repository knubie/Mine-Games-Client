// Generated by CoffeeScript 1.3.2
var onBodyLoad, onDeviceReady, preventBehavior, server_url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

server_url = "http://localhost:3000";

preventBehavior = function(e) {
  return e.preventDefault();
};

document.addEventListener("touchmove", preventBehavior, false);

onBodyLoad = function() {
  return document.addEventListener("deviceready", onDeviceReady, false);
};

onDeviceReady = function() {
  return $(function() {
    var CardDetailView, CardListView, Deck, Decks, LobbyView, Match, MatchListView, MatchView, Matches, actions, facebook_auth, gsub, lobby, templates;
    gsub = function(source, pattern, replacement) {
      var match, result;
      if (!((pattern != null) && (replacement != null))) {
        return source;
      }
      result = '';
      while (source.length > 0) {
        if ((match = source.match(pattern))) {
          result += source.slice(0, match.index);
          result += replacement;
          source = source.slice(match.index + match[0].length);
        } else {
          result += source;
          source = '';
        }
      }
      return result;
    };
    Array.prototype.minus = function(v) {
      var x, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        x = this[_i];
        if (x !== v) {
          _results.push(x);
        }
      }
      return _results;
    };
    templates = {
      LobbyMatchListItem: function(id, players) {
        var player;
        return "<li><a>" + ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = players.length; _i < _len; _i++) {
            player = players[_i];
            _results.push(player.username);
          }
          return _results;
        })()) + "</a></li>";
      },
      CardListItem: function(name, desc) {
        return "<li class='card'><a href='#card-detail' class='card-list-item' data-transition='slide'><img src='" + (gsub(name, ' ', '_')) + "_thumb.png' alt='' />" + name + desc + "</a></li>";
      }
    };
    actions = {
      discard: function(view, number, type, callback) {
        view.match.selection = [];
        view.events['click'] = 'select';
        if (number === 'any') {

        } else {
          if (view.selection.length === number) {
            return callback();
          }
        }
      }
    };
    Match = (function(_super) {

      __extends(Match, _super);

      function Match() {
        return Match.__super__.constructor.apply(this, arguments);
      }

      return Match;

    })(Backbone.Model);
    Matches = (function(_super) {

      __extends(Matches, _super);

      function Matches() {
        return Matches.__super__.constructor.apply(this, arguments);
      }

      Matches.prototype.initialize = function() {
        return this.fetch();
      };

      Matches.prototype.model = Match;

      Matches.prototype.url = "" + server_url + "/matches";

      return Matches;

    })(Backbone.Collection);
    Deck = (function(_super) {

      __extends(Deck, _super);

      function Deck() {
        return Deck.__super__.constructor.apply(this, arguments);
      }

      return Deck;

    })(Backbone.Model);
    Decks = (function(_super) {

      __extends(Decks, _super);

      function Decks() {
        return Decks.__super__.constructor.apply(this, arguments);
      }

      Decks.prototype.initialize = function() {
        return this.fetch();
      };

      Decks.prototype.model = Deck;

      Decks.prototype.url = "" + server_url + "/decks";

      return Decks;

    })(Backbone.Collection);
    CardDetailView = (function(_super) {

      __extends(CardDetailView, _super);

      function CardDetailView() {
        return CardDetailView.__super__.constructor.apply(this, arguments);
      }

      CardDetailView.prototype.el = 'what';

      return CardDetailView;

    })(Backbone.View);
    CardListView = (function(_super) {

      __extends(CardListView, _super);

      function CardListView() {
        return CardListView.__super__.constructor.apply(this, arguments);
      }

      CardListView.prototype.initialize = function(match, card) {
        this.match = match;
        this.card = card;
        return this.setElement($('#templates').find("#" + (gsub(this.card, ' ', '_'))).clone());
      };

      CardListView.prototype.events = {
        'click': 'render_card',
        'touchstart': 'touchstart',
        'touchmove': 'touchmove'
      };

      CardListView.prototype.w = 55;

      CardListView.prototype.touch = {
        x1: 0,
        y1: 0
      };

      CardListView.prototype.swiping = false;

      CardListView.prototype.dragging = false;

      CardListView.prototype.selected = false;

      CardListView.prototype.selection = [];

      CardListView.prototype.render_card = function() {
        return console.log('render me!');
      };

      CardListView.prototype.touchstart = function(e) {
        this.touch.x1 = e.originalEvent.pageX;
        return this.touch.y1 = e.originalEvent.pageY;
      };

      CardListView.prototype.touchmove = function(e) {
        var pct;
        this.dx = e.originalEvent.pageX - this.touch.x1;
        this.dy = e.originalEvent.pageY - this.touch.y1;
        if (Math.abs(this.dy) < 6 && Math.abs(this.dx) > 0 && !this.swiping && !this.dragging) {
          this.swiping = true;
          window.inAction = true;
          this.$el.addClass("drag");
        }
        if (this.swiping) {
          if (this.dx > 0 && this.dx < this.w) {
            this.used = false;
            pct = this.dx / this.w;
            if (pct < 0.05) {
              pct = 0;
            }
          } else if (this.dx < 0 && this.dx > -this.w) {

          } else if (this.dx >= this.w) {
            this.dx = this.w + (this.dx - this.w) * .25;
          } else if (this.dx <= -this.w) {
            this.dx = -this.w + (this.dx + this.w) * .25;
          }
          if (this.dx >= this.w - 1) {
            this.$el.addClass("green");
            this.used = true;
          } else {
            this.$el.removeClass("green");
          }
          return this.$el.css("-webkit-transform", "translate3d(" + this.dx + "px, 0, 0)");
        }
      };

      CardListView.prototype.select = function() {
        if (this.selected) {
          this.selected = true;
          this.$el.addClass('selected');
          return this.selection.push(this);
        } else {
          this.selected = false;
          this.$el.removeClass('selected');
          return this.selection.minus(this);
        }
      };

      return CardListView;

    })(Backbone.View);
    MatchView = (function(_super) {

      __extends(MatchView, _super);

      function MatchView() {
        return MatchView.__super__.constructor.apply(this, arguments);
      }

      MatchView.prototype.initialize = function(match, deck) {
        this.match = match;
        this.deck = deck;
        return this.render();
      };

      MatchView.prototype.el = '#match';

      MatchView.prototype.render = function() {
        var card, _fn, _i, _len, _ref,
          _this = this;
        console.log('about to render cards');
        this.$el.find('#hand').html('');
        _ref = this.deck.get('hand');
        _fn = function(card) {
          var view;
          view = new CardListView(_this.match, card);
          return _this.$el.find('#hand').append(view.el);
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          _fn(card);
        }
        return $.mobile.changePage("#match", {
          transition: "slide"
        });
      };

      return MatchView;

    })(Backbone.View);
    MatchListView = (function(_super) {

      __extends(MatchListView, _super);

      function MatchListView() {
        return MatchListView.__super__.constructor.apply(this, arguments);
      }

      MatchListView.prototype.initialize = function(match, deck) {
        this.match = match;
        this.deck = deck;
        return this.setElement(templates.LobbyMatchListItem(this.match.get('id'), this.match.get('players')));
      };

      MatchListView.prototype.events = {
        'click': 'render_match'
      };

      MatchListView.prototype.render_match = function() {
        var view;
        console.log('rendering match');
        return view = new MatchView(this.match, this.deck);
      };

      return MatchListView;

    })(Backbone.View);
    LobbyView = (function(_super) {

      __extends(LobbyView, _super);

      function LobbyView() {
        this.render = __bind(this.render, this);
        return LobbyView.__super__.constructor.apply(this, arguments);
      }

      LobbyView.prototype.initialize = function(matches, decks) {
        this.matches = matches;
        this.decks = decks;
        return this.render();
      };

      LobbyView.prototype.el = '#lobby';

      LobbyView.prototype.events = {
        'click #refresh_lobby': 'refresh',
        'click .logout': 'logout'
      };

      LobbyView.prototype.logout = function() {
        $.cookie('token', null);
        return $.mobile.changePage("#home", {
          transition: "flip"
        });
      };

      LobbyView.prototype.render = function() {
        var _this = this;
        return this.matches.on('reset', function() {
          return _this.decks.on('reset', function() {
            var match, _i, _len, _ref, _results;
            console.log('iterating...');
            $.mobile.changePage("#lobby", {
              transition: "none"
            });
            _ref = _this.matches.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              match = _ref[_i];
              _results.push((function(match) {
                var deck, view;
                deck = _this.decks.where({
                  match_id: match.get('id')
                });
                view = new MatchListView(match, deck[0]);
                return _this.$el.find('#matches').append(view.el).listview('refresh');
              })(match));
            }
            return _results;
          });
        });
      };

      LobbyView.prototype.refresh = function() {
        this.matches.fetch({
          add: true
        });
        return this.decks.fetch({
          add: true
        });
      };

      return LobbyView;

    })(Backbone.View);
    facebook_auth = function(callback) {
      window.plugins.childBrowser.showWebPage("" + server_url + "/auth/facebook?display=touch");
      return window.plugins.childBrowser.onLocationChange = function(loc) {
        var access_token;
        if (/access_token/.test(loc)) {
          access_token = unescape(loc).split("access_token/")[1];
          $.cookie("token", access_token, {
            expires: 7300
          });
          window.plugins.childBrowser.close();
          return callback();
        }
      };
    };
    if ($.cookie("token") != null) {
      lobby = new LobbyView(new Matches, new Decks);
    }
    $("#facebook-auth").on('click', function() {
      console.log('clicked facebook');
      return facebook_auth(function() {
        return lobby = new LobbyView(new Matches, new Decks);
      });
    });
    $('#login-form').submit(function(e) {
      $.post("" + server_url + "/signin.json", $(this).serialize(), function(user) {
        if (user.error != null) {
          return alert('invalid username and/or password');
        } else {
          $.cookie('token', user.token);
          return $.mobile.changePage('#lobby', {
            transition: 'slidedown'
          });
        }
      }, 'json');
      return e.preventDefault();
    });
    $('#signup-form').submit(function(e) {
      $.post("" + server_url + "/users.json", $(this).serialize(), function(user) {
        if (user.error != null) {
          return alert('error');
        } else {
          $.cookie('token', user.token);
          return $.mobile.changePage('#lobby', {
            transition: 'slidedown'
          });
        }
      }, 'json');
      return e.preventDefault();
    });
    $('#new_match_facebook').on('pageshow', function() {
      return $.getJSON("" + server_url + "/friends.json", function(data) {
        var friend, list, _i, _len, _ref, _results;
        $("#play_friends").html('');
        list = function(friend, type) {
          return $("#" + type).append("<label><input id='users_' name='users[]' type='checkbox' value='" + friend.id + "'>" + friend.name + "</label>").trigger('create');
        };
        _ref = data.play_friends;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          friend = _ref[_i];
          _results.push(list(friend, 'play_friends'));
        }
        return _results;
      });
    });
    return $('#new-match-username-form').submit(function(e) {
      $.post("" + server_url + "/matches.json", $(this).serialize(), function(data) {
        var error, _i, _len, _ref, _results;
        if (data.errors.length > 0) {
          _ref = data.errors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            error = _ref[_i];
            _results.push(alert(error));
          }
          return _results;
        } else {
          return alert("match created");
        }
      }, 'json');
      return e.preventDefault();
    });
  });
};
